#!/usr/bin/env node
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const tables = [
  'admin_mastercode_code',
  'admin_mastercode_data',
  'admin_systemsetting_menu',
  'admin_users_department',
  'admin_users_userprofiles',
  'admin_usersettings_role',
  'common_feedback_data',
  'it_education_attendee',
  'it_education_curriculum',
  'it_education_data',
  'it_hardware_data',
  'it_hardware_history',
  'it_hardware_user',
  'it_software_data',
  'it_software_history',
  'it_software_user',
  'it_solution_data',
  'it_voc_data',
  'main_calendar_data',
  'main_cost_data',
  'main_cost_finance',
  'main_education_data',
  'main_kpi_data',
  'main_kpi_record',
  'main_kpi_task',
  'main_task_data',
  'plan_investment_data',
  'plan_investment_finance',
  'plan_task_management',
  'security_accident_data',
  'security_accident_improvement',
  'security_accident_report',
  'security_education_attendee',
  'security_education_curriculum',
  'security_education_data',
  'security_inspection_data',
  'security_inspection_opl'
];

async function analyzeAllTables() {
  console.log('üîç Î™®Îì† ÌÖåÏù¥Î∏î ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏãúÏûë...\n');

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });

  const existingTables = [];
  const missingTables = [];

  console.log('üìä ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ Ï§ë...\n');
  console.log('=' .repeat(100));

  for (const tableName of tables) {
    const { data, error, count } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (error) {
      missingTables.push(tableName);
      console.log(`‚ùå ${tableName.padEnd(40)} | ÎØ∏Ï°¥Ïû¨ ÎòêÎäî Ï†ëÍ∑º Î∂àÍ∞Ä`);
    } else {
      existingTables.push({ name: tableName, count: count || 0 });
      console.log(`‚úÖ ${tableName.padEnd(40)} | Îç∞Ïù¥ÌÑ∞: ${(count || 0).toString().padStart(5)}Í∞ú`);
    }
  }

  console.log('\n\n' + '=' .repeat(100));
  console.log(`\nüìà ÌÜµÍ≥Ñ: Ï°¥Ïû¨ ${existingTables.length}Í∞ú / ÎØ∏Ï°¥Ïû¨ ${missingTables.length}Í∞ú / Ï†ÑÏ≤¥ ${tables.length}Í∞ú\n`);

  // Ï°¥Ïû¨ÌïòÎäî ÌÖåÏù¥Î∏î ÏÉÅÏÑ∏ Î∂ÑÏÑù
  console.log('\nüìã Ï°¥Ïû¨ÌïòÎäî ÌÖåÏù¥Î∏î ÏÉÅÏÑ∏ Ï†ïÎ≥¥\n');
  console.log('=' .repeat(100));

  for (const table of existingTables) {
    console.log(`\n‚ñ∂ ${table.name} (Ï¥ù ${table.count}Í∞ú Î†àÏΩîÎìú)`);
    console.log('-'.repeat(100));

    const { data } = await supabase
      .from(table.name)
      .select('*')
      .limit(1);

    if (data && data.length > 0) {
      const columns = Object.keys(data[0]);
      console.log(`  Ïª¨Îüº Ïàò: ${columns.length}Í∞ú`);
      console.log(`  Ïª¨Îüº Î™©Î°ù:`);

      // Ï£ºÏöî Ïª¨ÎüºÎßå ÌëúÏãú (Ï≤òÏùå 15Í∞ú)
      const displayColumns = columns.slice(0, 15);
      displayColumns.forEach((col, idx) => {
        const value = data[0][col];
        const type = value === null ? 'null' : typeof value;
        const preview = value !== null && value !== undefined
          ? (typeof value === 'object' ? JSON.stringify(value).substring(0, 30) : String(value).substring(0, 30))
          : 'null';

        console.log(`    ${(idx + 1).toString().padStart(2)}. ${col.padEnd(30)} | ${type.padEnd(10)} | ${preview}`);
      });

      if (columns.length > 15) {
        console.log(`    ... Ïô∏ ${columns.length - 15}Í∞ú Ïª¨Îüº`);
      }
    } else if (table.count === 0) {
      console.log(`  ‚ö†Ô∏è  Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏñ¥ Ïª¨Îüº Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.`);
    }
  }

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÜµÍ≥Ñ
  console.log('\n\nüìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÜµÍ≥Ñ\n');
  console.log('=' .repeat(100));

  const categoryStats = {
    'ADMIN (Í¥ÄÎ¶¨)': existingTables.filter(t => t.name.startsWith('admin_')),
    'MAIN (Î©îÏù∏)': existingTables.filter(t => t.name.startsWith('main_')),
    'SECURITY (Î≥¥Ïïà)': existingTables.filter(t => t.name.startsWith('security_')),
    'IT (ITÍ¥ÄÎ¶¨)': existingTables.filter(t => t.name.startsWith('it_')),
    'PLAN (Í≥ÑÌöç)': existingTables.filter(t => t.name.startsWith('plan_')),
    'COMMON (Í≥µÌÜµ)': existingTables.filter(t => t.name.startsWith('common_'))
  };

  Object.entries(categoryStats).forEach(([category, tables]) => {
    const totalRecords = tables.reduce((sum, t) => sum + t.count, 0);
    console.log(`\n‚ñ∂ ${category}`);
    console.log(`   ÌÖåÏù¥Î∏î Ïàò: ${tables.length}Í∞ú | Ï¥ù Îç∞Ïù¥ÌÑ∞: ${totalRecords}Í∞ú`);
    tables.forEach(t => {
      console.log(`     - ${t.name.padEnd(40)} : ${t.count.toString().padStart(6)}Í∞ú`);
    });
  });

  console.log('\n\n‚úÖ Î∂ÑÏÑù ÏôÑÎ£å!\n');
}

analyzeAllTables().catch(console.error);
