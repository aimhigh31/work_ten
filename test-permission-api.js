/**
 * /api/check-permission API ÌÖåÏä§Ìä∏ (kim ÏÇ¨Ïö©Ïûê)
 */
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  { auth: { autoRefreshToken: false, persistSession: false } }
);

(async () => {
  try {
    // kim ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
    const { data: user } = await supabase
      .from('admin_users_userprofiles')
      .select('email, user_name, role_id')
      .eq('email', 'kim@company.com')
      .single();

    console.log('üìã kim ÏÇ¨Ïö©Ïûê:', user);

    if (!user?.role_id) {
      console.error('‚ùå role_idÍ∞Ä ÏóÜÏäµÎãàÎã§!');
      return;
    }

    // getAllMenuPermissions Î°úÏßÅ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const { data: permissions, error } = await supabase
      .from('admin_users_rules_permissions')
      .select(`
        can_read,
        can_write,
        can_full,
        can_view_category,
        can_read_data,
        can_create_data,
        can_edit_own,
        can_edit_others,
        menu_id,
        admin_systemsetting_menu (
          menu_url,
          menu_page,
          menu_category,
          id
        )
      `)
      .eq('role_id', user.role_id);

    if (error) {
      console.error('‚ùå Í∂åÌïú Ï°∞Ìöå Ïã§Ìå®:', error);
      return;
    }

    console.log('\nüìä Ï°∞ÌöåÎêú Í∂åÌïú Ïàò:', permissions?.length);

    // APIÍ∞Ä Î∞òÌôòÌï† Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏÉùÏÑ±
    const permissionMap = {};

    for (const perm of permissions || []) {
      const menuUrl = perm.admin_systemsetting_menu?.menu_url;
      if (menuUrl) {
        permissionMap[menuUrl] = {
          menuId: perm.menu_id,
          canRead: perm.can_read,
          canWrite: perm.can_write,
          canFull: perm.can_full,
          canViewCategory: perm.can_view_category,
          canReadData: perm.can_read_data,
          canCreateData: perm.can_create_data,
          canEditOwn: perm.can_edit_own,
          canEditOthers: perm.can_edit_others,
          menuPage: perm.admin_systemsetting_menu?.menu_page,
          menuCategory: perm.admin_systemsetting_menu?.menu_category
        };
      }
    }

    console.log('\nüìÇ permissions Í∞ùÏ≤¥ Íµ¨Ï°∞:');
    console.log(`  Ï¥ù ${Object.keys(permissionMap).length}Í∞ú URL ÌÇ§`);
    console.log('\nÏÉòÌîå (Ï≤òÏùå 5Í∞ú):');
    Object.entries(permissionMap).slice(0, 5).forEach(([url, perm]) => {
      console.log(`\n  URL: "${url}"`);
      console.log(`    menuId: ${perm.menuId}`);
      console.log(`    menuPage: ${perm.menuPage}`);
      console.log(`    menuCategory: ${perm.menuCategory}`);
      console.log(`    canViewCategory: ${perm.canViewCategory}`);
    });

    // canViewCategory=trueÏù∏ Í∂åÌïúÎßå Ï∂îÏ∂ú
    const viewablePermissions = Object.entries(permissionMap).filter(
      ([url, perm]) => perm.canViewCategory === true
    );

    console.log('\n\n‚úÖ canViewCategory=trueÏù∏ Í∂åÌïú:');
    console.log(`  Ï¥ù ${viewablePermissions.length}Í∞ú`);
    viewablePermissions.forEach(([url, perm]) => {
      console.log(`  - [ID: ${perm.menuId}] ${perm.menuCategory} / ${perm.menuPage} : ${url}`);
    });

    // Object.valuesÎ°ú Î≥ÄÌôòÌñàÏùÑ Îïå
    console.log('\n\nüîç Object.values(permissionMap) Í≤∞Í≥º:');
    const permArray = Object.values(permissionMap);
    console.log(`  Î∞∞Ïó¥ Í∏∏Ïù¥: ${permArray.length}`);
    console.log('  Ï≤òÏùå 3Í∞ú Ìï≠Î™©Ïùò menuId:');
    permArray.slice(0, 3).forEach((p) => {
      console.log(`    - menuId: ${p.menuId}, page: ${p.menuPage}`);
    });

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  }
})();
