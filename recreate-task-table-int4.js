const { Client } = require('pg');
require('dotenv').config({ path: '.env.local' });

// Supabase URL에서 PostgreSQL 연결 정보 추출
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const projectRef = supabaseUrl.match(/https:\/\/([^.]+)/)[1];

const client = new Client({
  host: `aws-0-ap-northeast-2.pooler.supabase.com`,
  port: 6543,
  database: 'postgres',
  user: 'postgres.clokvlauaznlvpxzrzzy',
  password: process.env.SUPABASE_DB_PASSWORD,
  ssl: { rejectUnauthorized: false }
});

async function recreateTable() {
  try {
    await client.connect();
    console.log('✅ PostgreSQL 연결 성공');

    // 1. 기존 테이블 삭제
    console.log('\n🗑️ 기존 테이블 삭제 중...');
    await client.query(`DROP TABLE IF EXISTS main_task_data CASCADE;`);
    console.log('✅ 기존 테이블 삭제 완료');

    // 2. int4 id로 새 테이블 생성
    console.log('\n🔨 int4 id로 새 테이블 생성 중...');
    const createTableSQL = `
      CREATE TABLE main_task_data (
        id int4 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        code varchar(100) UNIQUE NOT NULL,
        registration_date date,
        start_date date,
        completed_date date,
        department varchar(100),
        work_content text,
        description text,
        team varchar(100),
        assignee_id uuid,
        assignee_name varchar(100),
        progress int4 DEFAULT 0,
        status varchar(50) DEFAULT '대기',
        is_active boolean DEFAULT true,
        created_at timestamptz DEFAULT now(),
        updated_at timestamptz DEFAULT now()
      );
    `;

    await client.query(createTableSQL);
    console.log('✅ 새 테이블 생성 완료 (id: int4)');

    // 3. 인덱스 생성
    console.log('\n📊 인덱스 생성 중...');
    await client.query(`CREATE INDEX idx_main_task_code ON main_task_data(code);`);
    await client.query(`CREATE INDEX idx_main_task_status ON main_task_data(status);`);
    await client.query(`CREATE INDEX idx_main_task_team ON main_task_data(team);`);
    await client.query(`CREATE INDEX idx_main_task_is_active ON main_task_data(is_active);`);
    console.log('✅ 인덱스 생성 완료');

    // 4. RLS 정책 설정
    console.log('\n🔒 RLS 정책 설정 중...');
    await client.query(`ALTER TABLE main_task_data ENABLE ROW LEVEL SECURITY;`);
    await client.query(`
      CREATE POLICY "모든 사용자가 조회 가능"
      ON main_task_data FOR SELECT
      USING (true);
    `);
    await client.query(`
      CREATE POLICY "모든 사용자가 삽입 가능"
      ON main_task_data FOR INSERT
      WITH CHECK (true);
    `);
    await client.query(`
      CREATE POLICY "모든 사용자가 수정 가능"
      ON main_task_data FOR UPDATE
      USING (true);
    `);
    await client.query(`
      CREATE POLICY "모든 사용자가 삭제 가능"
      ON main_task_data FOR DELETE
      USING (true);
    `);
    console.log('✅ RLS 정책 설정 완료');

    // 5. 테이블 정보 확인
    console.log('\n📋 테이블 정보 확인...');
    const result = await client.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns
      WHERE table_name = 'main_task_data'
      ORDER BY ordinal_position;
    `);

    console.log('\n✅ main_task_data 테이블 컬럼 정보:');
    result.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'NO' ? 'NOT NULL' : ''} ${row.column_default || ''}`);
    });

    console.log('\n✅ 테이블 재생성 완료!');
    console.log('✅ id 타입: int4 (auto-increment)');

  } catch (error) {
    console.error('❌ 오류 발생:', error);
    throw error;
  } finally {
    await client.end();
    console.log('\n✅ 연결 종료');
  }
}

recreateTable();
