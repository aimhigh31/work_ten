const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function createHardwareTableFixed() {
  console.log('🚀 it_hardware_data 테이블 생성 (필드명 수정)...');

  try {
    // 1. 테이블 생성 (예약어 문제 해결)
    console.log('📝 테이블 생성...');
    const createResult = await supabase.rpc('exec', {
      sql: `
        -- 기존 테이블 삭제
        DROP TABLE IF EXISTS it_hardware_data CASCADE;

        -- 새 테이블 생성 (current_user -> assigned_user로 변경)
        CREATE TABLE it_hardware_data (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          registration_date DATE NOT NULL DEFAULT CURRENT_DATE,
          code VARCHAR(50) UNIQUE NOT NULL,
          team VARCHAR(100),
          department VARCHAR(100),
          work_content TEXT,
          status VARCHAR(50) DEFAULT '예비',
          assignee VARCHAR(100),
          start_date DATE,
          completed_date DATE,
          attachments TEXT[],

          -- 하드웨어 특화 필드
          asset_category VARCHAR(100),
          asset_name VARCHAR(200),
          model VARCHAR(200),
          manufacturer VARCHAR(200),
          vendor VARCHAR(200),
          detail_spec TEXT,
          purchase_date DATE,
          warranty_end_date DATE,
          serial_number VARCHAR(200),
          assigned_user VARCHAR(100),  -- current_user 대신
          location VARCHAR(200),
          images TEXT[],

          -- 시스템 필드
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW(),
          created_by VARCHAR(100) DEFAULT 'user',
          updated_by VARCHAR(100) DEFAULT 'user'
        );
      `
    });

    if (createResult.error) {
      console.error('❌ 테이블 생성 실패:', createResult.error);
      return;
    }
    console.log('✅ 테이블 생성 완료');

    // 2. 권한 설정
    console.log('📝 권한 설정...');
    await supabase.rpc('exec', {
      sql: `
        GRANT ALL ON it_hardware_data TO postgres, authenticated, anon, service_role;
        ALTER TABLE it_hardware_data DISABLE ROW LEVEL SECURITY;
      `
    });
    console.log('✅ 권한 설정 완료');

    // 3. 샘플 데이터 삽입
    console.log('📝 샘플 데이터 삽입...');
    const insertResult = await supabase.rpc('exec', {
      sql: `
        INSERT INTO it_hardware_data (
          code, team, department, work_content, status, assignee, start_date,
          asset_category, asset_name, model, manufacturer, vendor, detail_spec,
          purchase_date, warranty_end_date, serial_number, assigned_user, location, registration_date
        ) VALUES
        ('HW-25-001', '개발팀', 'IT', 'Dell OptiPlex 3090', '사용', '김민수', '2025-01-15',
         '데스크톱', 'Dell OptiPlex 3090', 'OptiPlex 3090', 'Dell', 'Dell 코리아', 'Intel Core i5-11500, 8GB RAM, 256GB SSD',
         '2025-01-10', '2028-01-10', 'DL3090001', '김민수', 'IT실-A101', '2025-01-15'),
        ('HW-25-002', '디자인팀', 'IT', 'MacBook Pro 14인치', '사용', '이영희', '2025-01-10',
         '노트북', 'MacBook Pro 14인치', 'MacBook Pro 14 (M2)', 'Apple', 'Apple 코리아', 'Apple M2, 16GB RAM, 512GB SSD',
         '2025-01-08', '2026-01-08', 'MBA14002', '이영희', '디자인실-B201', '2025-01-10'),
        ('HW-25-003', 'IT팀', 'IT', 'HP ProLiant ML350', '사용', '박지훈', '2025-01-20',
         '서버', 'HP ProLiant ML350', 'ProLiant ML350 Gen10', 'HP', 'HP 코리아', 'Intel Xeon Silver 4214, 32GB RAM, 2TB HDD',
         '2025-01-18', '2028-01-18', 'HP350003', '박지훈', '서버실-C301', '2025-01-20');
      `
    });

    if (insertResult.error) {
      console.error('❌ 샘플 데이터 삽입 실패:', insertResult.error);
    } else {
      console.log('✅ 샘플 데이터 삽입 완료');
    }

    // 4. 직접 SQL로 확인
    console.log('📝 SQL로 데이터 확인...');
    const checkResult = await supabase.rpc('exec', {
      sql: "SELECT COUNT(*) as count, code, asset_name FROM it_hardware_data GROUP BY code, asset_name LIMIT 3;"
    });

    if (checkResult.error) {
      console.error('❌ SQL 확인 실패:', checkResult.error);
    } else {
      console.log('📊 SQL 확인 결과:', checkResult.data);
    }

    // 5. 긴 대기 후 REST API 테스트
    console.log('📝 스키마 캐시 업데이트 대기 (15초)...');
    await new Promise(resolve => setTimeout(resolve, 15000));

    console.log('📝 REST API 테스트...');
    const { data: restData, error: restError } = await supabase
      .from('it_hardware_data')
      .select('*')
      .limit(2);

    if (restError) {
      console.error('❌ REST API 테스트 실패:', restError);
    } else {
      console.log('✅ REST API 테스트 성공!');
      console.log('📊 REST API 조회 결과:', restData?.map(d => ({ code: d.code, asset_name: d.asset_name })));
    }

    console.log('🎉 it_hardware_data 테이블 생성 완료!');

  } catch (error) {
    console.error('❌ 전체 프로세스 실패:', error);
  }
}

createHardwareTableFixed();