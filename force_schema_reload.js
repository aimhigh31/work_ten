const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function forceSchemaReload() {
  console.log('🔄 Supabase 스키마 강제 새로고침...');

  try {
    // 1. PostgreSQL 함수를 사용한 스키마 새로고침
    console.log('📝 PostgreSQL 스키마 새로고침...');
    const reloadResult = await supabase.rpc('exec', {
      sql: `
        -- 스키마 변경 알림
        NOTIFY pgrst, 'reload schema';

        -- 연결 풀 새로고침
        SELECT pg_reload_conf();

        -- 현재 연결된 세션 확인
        SELECT datname, usename, application_name, state
        FROM pg_stat_activity
        WHERE datname = current_database()
        LIMIT 5;
      `
    });

    if (reloadResult.error) {
      console.error('❌ PostgreSQL 새로고침 실패:', reloadResult.error);
    } else {
      console.log('✅ PostgreSQL 새로고침 완료');
    }

    // 2. 테이블 재생성 (다른 방식)
    console.log('📝 테이블 재생성...');
    const recreateResult = await supabase.rpc('exec', {
      sql: `
        -- 완전 삭제
        DROP TABLE IF EXISTS it_hardware_data CASCADE;

        -- 즉시 재생성
        CREATE TABLE it_hardware_data (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          registration_date DATE NOT NULL DEFAULT CURRENT_DATE,
          code VARCHAR(50) UNIQUE NOT NULL,
          team VARCHAR(100),
          department VARCHAR(100),
          work_content TEXT,
          status VARCHAR(50) DEFAULT '예비',
          assignee VARCHAR(100),
          start_date DATE,
          completed_date DATE,
          attachments TEXT[],
          asset_category VARCHAR(100),
          asset_name VARCHAR(200),
          model VARCHAR(200),
          manufacturer VARCHAR(200),
          vendor VARCHAR(200),
          detail_spec TEXT,
          purchase_date DATE,
          warranty_end_date DATE,
          serial_number VARCHAR(200),
          current_user VARCHAR(100),
          location VARCHAR(200),
          images TEXT[],
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW(),
          created_by VARCHAR(100) DEFAULT 'user',
          updated_by VARCHAR(100) DEFAULT 'user'
        );

        -- 모든 권한 부여
        GRANT ALL ON it_hardware_data TO postgres, authenticated, anon, service_role;

        -- RLS 비활성화 (일단 테스트용)
        ALTER TABLE it_hardware_data DISABLE ROW LEVEL SECURITY;

        -- 샘플 데이터
        INSERT INTO it_hardware_data (
          code, team, department, work_content, status, assignee, start_date,
          asset_category, asset_name, model, manufacturer, vendor, detail_spec,
          purchase_date, warranty_end_date, serial_number, current_user, location, registration_date
        ) VALUES
        ('HW-25-001', '개발팀', 'IT', 'Dell OptiPlex 3090', '사용', '김민수', '2025-01-15',
         '데스크톱', 'Dell OptiPlex 3090', 'OptiPlex 3090', 'Dell', 'Dell 코리아', 'Intel Core i5-11500, 8GB RAM, 256GB SSD',
         '2025-01-10', '2028-01-10', 'DL3090001', '김민수', 'IT실-A101', '2025-01-15'),
        ('HW-25-002', '디자인팀', 'IT', 'MacBook Pro 14인치', '사용', '이영희', '2025-01-10',
         '노트북', 'MacBook Pro 14인치', 'MacBook Pro 14 (M2)', 'Apple', 'Apple 코리아', 'Apple M2, 16GB RAM, 512GB SSD',
         '2025-01-08', '2026-01-08', 'MBA14002', '이영희', '디자인실-B201', '2025-01-10'),
        ('HW-25-003', 'IT팀', 'IT', 'HP ProLiant ML350', '사용', '박지훈', '2025-01-20',
         '서버', 'HP ProLiant ML350', 'ProLiant ML350 Gen10', 'HP', 'HP 코리아', 'Intel Xeon Silver 4214, 32GB RAM, 2TB HDD',
         '2025-01-18', '2028-01-18', 'HP350003', '박지훈', '서버실-C301', '2025-01-20');

        -- 결과 반환
        SELECT 'Table created successfully' as result, COUNT(*) as row_count FROM it_hardware_data;
      `
    });

    if (recreateResult.error) {
      console.error('❌ 테이블 재생성 실패:', recreateResult.error);
    } else {
      console.log('✅ 테이블 재생성 완료:', recreateResult.data);
    }

    // 3. 길게 대기 후 테스트
    console.log('📝 스키마 캐시 업데이트 대기 (10초)...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // 4. REST API 테스트
    console.log('📝 REST API 최종 테스트...');
    const { data: finalData, error: finalError } = await supabase
      .from('it_hardware_data')
      .select('*')
      .limit(3);

    if (finalError) {
      console.error('❌ REST API 최종 테스트 실패:', finalError);

      // PostgREST 스키마 수동 새로고침 시도
      console.log('📝 PostgREST 수동 새로고침 시도...');
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/`, {
          method: 'GET',
          headers: {
            'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          }
        });
        console.log('🔄 PostgREST 응답 상태:', response.status);
      } catch (e) {
        console.log('⚠️ PostgREST 수동 새로고침 실패:', e.message);
      }

    } else {
      console.log('✅ REST API 최종 테스트 성공!');
      console.log('📊 조회된 데이터:', finalData?.map(d => ({ code: d.code, asset_name: d.asset_name })));
    }

    console.log('🎉 스키마 강제 새로고침 완료!');

  } catch (error) {
    console.error('❌ 강제 새로고침 실패:', error);
  }
}

forceSchemaReload();